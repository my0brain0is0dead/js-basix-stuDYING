/*const person = {
    name: 'maxim',
    age: 50, 
    greet: function() {
        console.log('Greetings!')
    }
}*/

const person = new Object({
    name: 'maxim',
    age: 50, 
    greet: function() {
        console.log('Greetings!')
    }
})

Object.prototype.sayHello = function() {
    console.log('Hello')
}

//новый объект наследует все методы родительского объекта
const lena = Object.create(person)
lena.name = 'Elena'

const str = new String('I am String')

/*
насколько я понял что-то типо наследования 
от класса или объекта, в новый экземпляр класса попадают все 
функции и поля присущие этому классу

проверка функций и полей идет в порядке от явно указанных до
полей и функций прототипа

непонятно правда где это можно было бы использовать, но похуй

объект наследник наследует так же функции и поля прототипа прототипа
создавая любую сущность, будь то переменная, константа или что-то ещё
она становится дочерним объектом определённого класса

кароче очередная ООПшная hooynya
*/

